func (q *QOTD) restCall(ctx context.Context, endpoint string, req, resp interface{}) error {
	// If we don't have a deadline, apply a default.
	if _, ok := ctx.Deadline(); !ok {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, 2*time.Second)
		defer cancel()
	}

	// Conert our request into JSON.
	b, err := json.Marshal(req)
	if err != nil {
		return err
	}

	// Create a new HTTP request using POST to out endpoint with the body
	// set to our JSON request.
	hReq, err := http.NewRequestWithContext(
		ctx,
		http.MethodPost,
		endpoint,
		bytes.NewBuffer(b),
	)
	if err != nil {
		return err
	}

	// Make the request.
	hResp, err := q.client.Do(hReq)
	if err != nil {
		return err
	}

	// Read the response's Body.
	b, err = io.ReadAll(hResp.Body)
	if err != nil {
		return err
	}

	// Unmarshal the JSON into the response.
	return json.Unmarshal(b, resp)
}